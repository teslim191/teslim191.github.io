WEBVTT

1
00:00:00.650 --> 00:00:04.800
Functions represent some of the most
powerful aspects of the R language.

2
00:00:04.800 --> 00:00:08.110
And they really represent the transition
of the user

3
00:00:08.110 --> 00:00:11.000
of R into the kind of programmer of R.

4
00:00:11.000 --> 00:00:13.400
And the basic idea is that you can type
the command

5
00:00:13.400 --> 00:00:16.410
line and kind of explore some data, and
run some code.

6
00:00:16.410 --> 00:00:18.510
But eventually you'll probably get to the
point where

7
00:00:18.510 --> 00:00:20.690
you need to do something a little bit more
complex.

8
00:00:20.690 --> 00:00:22.800
A little bit more than, than can be
expressed

9
00:00:22.800 --> 00:00:25.580
in a single line or maybe in two lines.

10
00:00:25.580 --> 00:00:27.870
And if you have to do this over and over
again, then you're

11
00:00:27.870 --> 00:00:30.710
usually going to want to encode this kind
of functionality in a function.

12
00:00:30.710 --> 00:00:33.840
I'm going to talk about functions in three
parts here.

13
00:00:33.840 --> 00:00:35.810
First I'll talk just about the basics of
how

14
00:00:35.810 --> 00:00:38.860
to write functions and how they are
written, in R.

15
00:00:38.860 --> 00:00:40.480
Then I'm going to talk a little bit about
lexical

16
00:00:40.480 --> 00:00:43.930
scoping and the scoping rules, in, for the
R language.

17
00:00:43.930 --> 00:00:46.250
And then last, I'm going to end with a
little example.

18
00:00:49.350 --> 00:00:53.090
So, functions in R are created using the
function directive

19
00:00:53.090 --> 00:00:55.740
and functions are stored as R objects just
like anything else.

20
00:00:55.740 --> 00:00:59.290
So you might have a vector of integers a
list of

21
00:00:59.290 --> 00:01:01.710
different things, a data frame, and then
you have a function.

22
00:01:01.710 --> 00:01:05.040
So, in particular, R objects, R functions
are

23
00:01:05.040 --> 00:01:08.590
R objects that are of the class function,
okay?

24
00:01:08.590 --> 00:01:11.270
So, the basic instruction here is that you
assign

25
00:01:11.270 --> 00:01:14.460
to some object, here I call it F, the,

26
00:01:14.460 --> 00:01:16.990
the function directive, which will take
some

27
00:01:16.990 --> 00:01:19.250
arguments, and then inside the curly
braces

28
00:01:19.250 --> 00:01:24.030
there is R, there is R code, which does
something that the function does.

29
00:01:24.030 --> 00:01:27.520
So one nice thing about R is that
functions

30
00:01:27.520 --> 00:01:30.320
are con, considered what are called first
class objects.

31
00:01:30.320 --> 00:01:33.670
So you can treat a function just like you
can treat pretty much any other R object.

32
00:01:33.670 --> 00:01:35.810
So importantly, this means that you can

33
00:01:35.810 --> 00:01:38.860
pass functions as arguments to other
functions.

34
00:01:38.860 --> 00:01:39.500
This is actually

35
00:01:39.500 --> 00:01:43.850
ver, a very useful feature in statistics.
And also functions can be nested.

36
00:01:43.850 --> 00:01:46.670
So you can define a function inside of
another function, and we'll

37
00:01:46.670 --> 00:01:51.150
see what the implications of this are we
talk about lexical scoping.

38
00:01:51.150 --> 00:01:53.280
So the return value of a function is
simply the

39
00:01:53.280 --> 00:01:57.550
very last R expression in the function
value to be evaluated.

40
00:01:57.550 --> 00:02:00.870
so, there's no special expression for
returning something for a function.

41
00:02:00.870 --> 00:02:02.560
Although, there is a function called
Return.

42
00:02:02.560 --> 00:02:04.410
Which we'll talk about in a second.

43
00:02:04.410 --> 00:02:08.130
So functions have what are called named
arguments.

44
00:02:08.130 --> 00:02:11.100
And the named arguments can potentially
have default values.

45
00:02:11.100 --> 00:02:13.080
So, a lot of these features are useful for
when

46
00:02:13.080 --> 00:02:17.570
you're designing functions that, that may
be used by other people.

47
00:02:17.570 --> 00:02:19.450
For example, you may have a function that
had a lot

48
00:02:19.450 --> 00:02:22.030
of different arguments so you can tweak a
lot of different things.

49
00:02:22.030 --> 00:02:25.090
But most of the time, you don't have to
change all those different arguments.

50
00:02:25.090 --> 00:02:27.030
You may only care about one or two.

51
00:02:27.030 --> 00:02:29.420
So it's useful for some of the arguments
to have default values.

52
00:02:30.570 --> 00:02:32.540
So first of all, there's the formal
arguments, which

53
00:02:32.540 --> 00:02:35.240
are the arguments that are included in the
function definition.

54
00:02:35.240 --> 00:02:38.470
So if you go back to the previous slide
the formal

55
00:02:38.470 --> 00:02:41.710
arguments are the ones that are included
inside this function definition here.

56
00:02:44.110 --> 00:02:49.130
The formal's function actually will, takes
a function as an input

57
00:02:49.130 --> 00:02:52.620
and returns a list of all the formal
arguments of a function.

58
00:02:52.620 --> 00:02:56.890
So not every function call in R makes use
of all the formal arguments.

59
00:02:56.890 --> 00:03:00.470
So for example, if a, if a function has
ten different arguments you may

60
00:03:00.470 --> 00:03:05.690
not, you may not have to specify a value
for all ten of those arguments.

61
00:03:05.690 --> 00:03:09.150
So function arguments can be missing or
they

62
00:03:09.150 --> 00:03:13.240
may have default values that are used when
they are not specified by the users.

63
00:03:13.240 --> 00:03:17.800
So R function arguments can be matched
positionally or by name.

64
00:03:17.800 --> 00:03:20.080
So when, this is very, this is key when

65
00:03:20.080 --> 00:03:23.700
you're writing a function and also when
you're calling it.

66
00:03:23.700 --> 00:03:27.570
So for example, take a look at the
function sd, which calculates the standard

67
00:03:27.570 --> 00:03:34.360
deviation of, of, of a set of numbers.
So sd takes a input x, which is the name

68
00:03:34.360 --> 00:03:37.330
of the argument and which is going to be a
vector of data.

69
00:03:37.330 --> 00:03:40.780
And there's a second argument called na.rm
and this controls whether

70
00:03:40.780 --> 00:03:44.374
the missing values in the data should be
removed or not.

71
00:03:44.374 --> 00:03:47.070
And the default value is for na.rm to be
equal to false.

72
00:03:47.070 --> 00:03:51.820
So by default if you have missing data in
your, in the, in the set of

73
00:03:51.820 --> 00:03:53.320
numbers for which you want to calculate
the

74
00:03:53.320 --> 00:03:58.030
standard deviation the missing values will
not be included.

75
00:03:58.030 --> 00:03:59.420
So, here I'm

76
00:03:59.420 --> 00:04:02.740
simulating some data and I'm just
simulating a hundred

77
00:04:02.740 --> 00:04:05.340
normal random variables, and there's no
missing data here.

78
00:04:05.340 --> 00:04:07.590
So, if I just calculate sd on the vector

79
00:04:07.590 --> 00:04:10.170
it'll give me an estimate of the standard
deviation.

80
00:04:10.170 --> 00:04:13.740
If I say X equals my data that's the same
thing.

81
00:04:13.740 --> 00:04:18.800
So here I've named the argument but I
haven't but otherwise

82
00:04:18.800 --> 00:04:21.580
the data are the same so it'll calculate
the standard deviation.

83
00:04:21.580 --> 00:04:24.520
In the first example I didn't

84
00:04:24.520 --> 00:04:25.210
name the argument.

85
00:04:25.210 --> 00:04:28.510
So it defaulted to passing mydata to be
the first argument of the function.

86
00:04:29.540 --> 00:04:31.960
So in the next example here, I'm going to
name both arguments.

87
00:04:31.960 --> 00:04:35.200
I'm going to say X equals mydata, and
na.rm equals false.

88
00:04:35.200 --> 00:04:38.030
That calculates the same thing as before.

89
00:04:38.030 --> 00:04:41.180
Now when I name the arguments, I don't
have to put them in any special order.

90
00:04:41.180 --> 00:04:43.642
So for example, I could reverse the order
of the argument here.

91
00:04:43.642 --> 00:04:46.790
Say na.rm is equals false first, and then
say x

92
00:04:46.790 --> 00:04:50.140
equals mydata second, and that will
produce exactly the same

93
00:04:50.140 --> 00:04:52.440
results because I've named the arguments.

94
00:04:52.440 --> 00:04:55.050
Now, what happens if I name one argument
and don't name the other?

95
00:04:56.540 --> 00:04:59.180
Well what happens is that the named
argument is set, and

96
00:04:59.180 --> 00:05:02.080
you can figure it as being removed from
the argument list, and

97
00:05:02.080 --> 00:05:05.600
then any other, any other things that are
past will be matched

98
00:05:05.600 --> 00:05:08.550
to the function arguments in the order in
which they, they come.

99
00:05:08.550 --> 00:05:12.030
So for example, SD after you remove the
na.rm

100
00:05:12.030 --> 00:05:15.270
argument only has one more argument left
and so mydata

101
00:05:15.270 --> 00:05:17.270
would be assigned to that argument.

102
00:05:17.270 --> 00:05:21.760
So all these expressions return the same
exact value.

103
00:05:21.760 --> 00:05:25.370
So although it's generally, all these
expressions are

104
00:05:25.370 --> 00:05:29.080
equivalent, I don't say recommend all of
them equally.

105
00:05:29.080 --> 00:05:32.330
So for example, I don't necessarily
recommend reversing the order of the

106
00:05:32.330 --> 00:05:36.630
arguments just because you can even though
if you name them, it's appropriate.

107
00:05:36.630 --> 00:05:39.040
so, just, just because that can lead to
some confusion.

108
00:05:41.490 --> 00:05:45.840
So positional matching and matching by
name can be mixed and this

109
00:05:45.840 --> 00:05:49.700
is quite useful often for functions that
have very long argument lists.

110
00:05:50.790 --> 00:05:54.160
And so for example the lm function here
which

111
00:05:54.160 --> 00:05:58.190
fits linear models to data has this
argument list here.

112
00:05:58.190 --> 00:06:00.070
So the first is the formula, the second is

113
00:06:00.070 --> 00:06:02.550
the data And then subset, the weights et
cetera.

114
00:06:02.550 --> 00:06:07.090
And you see that the first five arguments
here don't have any default value.

115
00:06:07.090 --> 00:06:10.650
So, the user has to specify them.

116
00:06:10.650 --> 00:06:14.990
So the but then the method, the model, the
X argument, they all have

117
00:06:14.990 --> 00:06:16.800
default values so if you don't specify

118
00:06:16.800 --> 00:06:19.050
them they will use those values by
default.

119
00:06:19.050 --> 00:06:22.150
And so the following two function calls
are equivalent.

120
00:06:22.150 --> 00:06:26.780
I could have specified the data first and
then the formula and then the model.

121
00:06:26.780 --> 00:06:29.260
And then, and then, and then the subset
arguments

122
00:06:29.260 --> 00:06:32.250
or I could specify the formula first, the
data second,

123
00:06:32.250 --> 00:06:35.780
the subset and then say model is equal to
false.

124
00:06:35.780 --> 00:06:37.860
Now the reason why the first one is okay
is

125
00:06:37.860 --> 00:06:40.432
because I, so I matched the data argument
by name.

126
00:06:40.432 --> 00:06:43.200
You can imagine that that's kind of taken
out of the argument

127
00:06:43.200 --> 00:06:47.520
list now, then Y till the X doesn't, isn't
specified by name.

128
00:06:47.520 --> 00:06:50.580
So it's given to the first argument that
hasn't already been matched.

129
00:06:50.580 --> 00:06:52.978
And I, in which case that's the formula.

130
00:06:52.978 --> 00:06:55.540
Model equal to false, so that's been
matched by name so

131
00:06:55.540 --> 00:06:57.930
I can kind of get rid of that from the
argument list.

132
00:06:57.930 --> 00:07:00.240
And then 1 through 100 has to be assigned

133
00:07:00.240 --> 00:07:02.200
to the argument that has not yet already
been matched.

134
00:07:02.200 --> 00:07:05.450
So in this case formula was already
matched, data was already matched.

135
00:07:05.450 --> 00:07:06.770
And so the next one is subset.

136
00:07:06.770 --> 00:07:09.830
So 1 to 100 get's assigned to the subset
argument.

137
00:07:09.830 --> 00:07:11.710
So this is somewhat a confusing way to
call lm,

138
00:07:11.710 --> 00:07:13.680
and I don't recommend that you do it this
way.

139
00:07:13.680 --> 00:07:15.740
But, I, I wrote it this way just to
demonstrate

140
00:07:15.740 --> 00:07:20.780
how positional matching, and matching by
name can work together.

141
00:07:20.780 --> 00:07:23.170
A common usage for lm though is the second

142
00:07:23.170 --> 00:07:25.184
version here.
Which say lm Y til the X.

143
00:07:25.184 --> 00:07:26.780
So there is a formula there.

144
00:07:26.780 --> 00:07:28.350
And then the next one is mydata, which the

145
00:07:28.350 --> 00:07:31.530
data set which you're going to grab the
data from.

146
00:07:31.530 --> 00:07:33.830
The subset argument and then, so the first
three arguments,

147
00:07:33.830 --> 00:07:38.060
you know, are commonly specified, every
time you call lm.

148
00:07:38.060 --> 00:07:40.510
But then, the rest you may or may not
specify and so

149
00:07:40.510 --> 00:07:44.325
you may, if you just want to specify one
of the following arguments.

150
00:07:44.325 --> 00:07:46.460
It's easier just to call it out by name.

151
00:07:49.266 --> 00:07:53.830
so, most of the time, the named arguments
are useful in the command line.

152
00:07:53.830 --> 00:07:57.200
When you have a long argument list and you
want to use the defaults for everything

153
00:07:57.200 --> 00:08:00.850
except for one of the arguments, which may
be in the middle or near the end

154
00:08:00.850 --> 00:08:02.890
of the list, and you can't usually, you

155
00:08:02.890 --> 00:08:05.930
know, you can't remember exactly which
argument it

156
00:08:05.930 --> 00:08:07.960
is, whether it's the fourth, or the sixth,

157
00:08:07.960 --> 00:08:10.250
or the tenth argument on the argument
list.

158
00:08:10.250 --> 00:08:12.220
And so you just call it by name, and that
way

159
00:08:12.220 --> 00:08:14.320
you don't have to remember the order of
the arguments on

160
00:08:14.320 --> 00:08:15.750
the argument list.

161
00:08:15.750 --> 00:08:19.230
Another example where this comes in handy
is for plotting, because

162
00:08:19.230 --> 00:08:22.130
mo, many of the plot functions have very
long argument lists.

163
00:08:23.180 --> 00:08:24.700
All of which have default values and you

164
00:08:24.700 --> 00:08:27.060
may only want to tweak one specific
argument.

165
00:08:27.060 --> 00:08:29.620
And so it's useful not to have to
remember, you know, what

166
00:08:29.620 --> 00:08:32.190
the order of that argument is on the arg,
on the argument list.

167
00:08:33.766 --> 00:08:36.628
So function arguments can, can also be
partially matched

168
00:08:36.628 --> 00:08:39.544
which is used, mostly useful primarily for
interactive work,

169
00:08:39.544 --> 00:08:41.430
not so much for programming.

170
00:08:41.430 --> 00:08:45.630
But when you call a function, if the
argument has a very long name

171
00:08:45.630 --> 00:08:48.920
you can match it partially so you can type
part of the argument name

172
00:08:48.920 --> 00:08:54.090
and as long as there's a unique match
there then it will, the R

173
00:08:54.090 --> 00:08:58.290
system will match the argument and assign
the value to, to, to the correct one.

174
00:08:58.290 --> 00:09:00.510
So the, the, the order of the operations
that

175
00:09:00.510 --> 00:09:03.750
R uses, first it'll check for an exact
match.

176
00:09:03.750 --> 00:09:05.850
So if you name an argument

177
00:09:05.850 --> 00:09:07.050
it'll check, check to see if there's

178
00:09:07.050 --> 00:09:09.410
an argument that, that exactly matches
that name.

179
00:09:09.410 --> 00:09:13.310
If there's no exact match it'll look for a
partial match.

180
00:09:13.310 --> 00:09:15.720
And then if that doesn't work, it'll look
for a positional match.